PHP allows:
> overriding methods to return a more specific type. this ic called Return Type Covariance
> us to accept less specific parameter types. this is called Parameter Type Contravariance

Covariance allows a child's method to return a more specific type than the return type of its parent's method

Summary:

> Covariance - LESS specific to More specific
> Contravariance - More specific to less specific


PHP support:
> Covariant return types
> Contravariant parameter types
> Class constructor not apply to above rules


For UnionType and IntersectionType
> when using 'union types' in base class, it is covariant when you REMOVE a type while overriding a method in the child class.
<?php
    class A{
        public function run():C/D{}
    }

    Class B extends A{
        public function run():C
    }

> when using 'intersection types' in base class, it is covariant when you add a type while overriding a method in a child class.
<?php
    class A{
        public function run():C{}
    }

    Class B extends A{
        public function run():C&D
    }

> the opposite goes for Contravariance as well